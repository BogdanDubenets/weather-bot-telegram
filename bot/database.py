import sqlite3
import logging
from datetime import datetime, timedelta
import json

logger = logging.getLogger(__name__)

class DatabaseService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
    
    def __init__(self, db_path='weather_bot.db'):
        self.db_path = db_path
    
    def get_connection(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
        return sqlite3.connect(self.db_path, check_same_thread=False)
    
    def init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    language_code TEXT,
                    registration_date TEXT,
                    last_activity TEXT,
                    last_location_lat REAL,
                    last_location_lon REAL,
                    last_location_name TEXT,
                    total_orders INTEGER DEFAULT 0,
                    total_stars_spent INTEGER DEFAULT 0
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è –ø–ª–∞—Ç–µ–∂—ñ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS payments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    stars_amount INTEGER,
                    payload TEXT,
                    payment_date TEXT,
                    telegram_payment_id TEXT,
                    status TEXT DEFAULT 'completed',
                    weather_delivered BOOLEAN DEFAULT FALSE,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS usage_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    action TEXT,
                    details TEXT,
                    timestamp TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü—è –ø–æ–º–∏–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS error_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    error_type TEXT,
                    error_message TEXT,
                    stack_trace TEXT,
                    timestamp TEXT
                )
            ''')
            
            # –Ü–Ω–¥–µ–∫—Å–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_payments_user_id ON payments(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_payments_date ON payments(payment_date)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_usage_stats_user_id ON usage_stats(user_id)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_usage_stats_timestamp ON usage_stats(timestamp)')
            
            conn.commit()
            conn.close()
            
            logger.info("‚úÖ Database initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Database initialization error: {e}")
            return False
    
    def save_user(self, user_data):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            cursor.execute('SELECT user_id FROM users WHERE user_id = ?', (user_data['id'],))
            exists = cursor.fetchone()
            
            current_time = datetime.now().isoformat()
            
            if exists:
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cursor.execute('''
                    UPDATE users 
                    SET username = ?, first_name = ?, last_name = ?, 
                        language_code = ?, last_activity = ?
                    WHERE user_id = ?
                ''', (
                    user_data.get('username'),
                    user_data.get('first_name'),
                    user_data.get('last_name'),
                    user_data.get('language_code'),
                    current_time,
                    user_data['id']
                ))
            else:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                cursor.execute('''
                    INSERT INTO users 
                    (user_id, username, first_name, last_name, language_code, 
                     registration_date, last_activity)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_data['id'],
                    user_data.get('username'),
                    user_data.get('first_name'),
                    user_data.get('last_name'),
                    user_data.get('language_code'),
                    current_time,
                    current_time
                ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ User saved: {user_data.get('username', user_data['id'])}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Save user error: {e}")
            return False
    
    def save_payment(self, user_id, stars_amount, payload, telegram_payment_id):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
            cursor.execute('''
                INSERT INTO payments 
                (user_id, stars_amount, payload, payment_date, telegram_payment_id)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user_id,
                stars_amount,
                payload,
                datetime.now().isoformat(),
                telegram_payment_id
            ))
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            cursor.execute('''
                UPDATE users 
                SET total_orders = total_orders + 1,
                    total_stars_spent = total_stars_spent + ?
                WHERE user_id = ?
            ''', (stars_amount, user_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Payment saved: {stars_amount} stars for user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Save payment error: {e}")
            return False
    
    def get_last_payment(self, user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT stars_amount FROM payments 
                WHERE user_id = ? 
                ORDER BY payment_date DESC 
                LIMIT 1
            ''', (user_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            stars = result[0] if result else None
            logger.info(f"üìä Last payment for user {user_id}: {stars} stars")
            return stars
            
        except Exception as e:
            logger.error(f"‚ùå Get last payment error: {e}")
            return None
    
    def update_location(self, user_id, lat, lon, location_name=None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE users 
                SET last_location_lat = ?, last_location_lon = ?, 
                    last_location_name = ?, last_activity = ?
                WHERE user_id = ?
            ''', (lat, lon, location_name, datetime.now().isoformat(), user_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Location updated for user {user_id}: {lat}, {lon}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Update location error: {e}")
            return False
    
    def mark_weather_delivered(self, payment_id):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏, —â–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE payments 
                SET weather_delivered = TRUE 
                WHERE id = ?
            ''', (payment_id,))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Weather marked as delivered for payment {payment_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Mark weather delivered error: {e}")
            return False
    
    def log_user_action(self, user_id, action, details=None):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO usage_stats (user_id, action, details, timestamp)
                VALUES (?, ?, ?, ?)
            ''', (user_id, action, json.dumps(details) if details else None, datetime.now().isoformat()))
            
            conn.commit()
            conn.close()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Log user action error: {e}")
            return False
    
    def log_error(self, user_id, error_type, error_message, stack_trace=None):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO error_logs (user_id, error_type, error_message, stack_trace, timestamp)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, error_type, error_message, stack_trace, datetime.now().isoformat()))
            
            conn.commit()
            conn.close()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Log error failed: {e}")
            return False
    
    def get_user_stats(self, user_id):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT username, first_name, registration_date, last_activity,
                       total_orders, total_stars_spent
                FROM users 
                WHERE user_id = ?
            ''', (user_id,))
            
            user_data = cursor.fetchone()
            
            if user_data:
                cursor.execute('''
                    SELECT COUNT(*) as total_payments,
                           AVG(stars_amount) as avg_stars,
                           MAX(payment_date) as last_payment
                    FROM payments 
                    WHERE user_id = ?
                ''', (user_id,))
                
                payment_stats = cursor.fetchone()
                
                conn.close()
                
                return {
                    'username': user_data[0],
                    'first_name': user_data[1],
                    'registration_date': user_data[2],
                    'last_activity': user_data[3],
                    'total_orders': user_data[4],
                    'total_stars_spent': user_data[5],
                    'total_payments': payment_stats[0] if payment_stats else 0,
                    'avg_stars_per_order': round(payment_stats[1], 2) if payment_stats[1] else 0,
                    'last_payment_date': payment_stats[2] if payment_stats else None
                }
            
            conn.close()
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Get user stats error: {e}")
            return None
    
    def get_bot_stats(self):
        """–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cursor.execute('SELECT COUNT(*) FROM users')
            total_users = cursor.fetchone()[0]
            
            # –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
            thirty_days_ago = (datetime.now() - timedelta(days=30)).isoformat()
            cursor.execute('SELECT COUNT(*) FROM users WHERE last_activity > ?', (thirty_days_ago,))
            active_users = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂—ñ–≤
            cursor.execute('''
                SELECT COUNT(*) as total_payments,
                       SUM(stars_amount) as total_stars,
                       AVG(stars_amount) as avg_payment
                FROM payments
            ''')
            payment_stats = cursor.fetchone()
            
            # –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π —Ç–∞—Ä–∏—Ñ
            cursor.execute('''
                SELECT stars_amount, COUNT(*) as count
                FROM payments 
                GROUP BY stars_amount 
                ORDER BY count DESC 
                LIMIT 1
            ''')
            popular_plan = cursor.fetchone()
            
            # –î–æ—Ö–æ–¥–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            today = datetime.now().date().isoformat()
            cursor.execute('''
                SELECT SUM(stars_amount) 
                FROM payments 
                WHERE date(payment_date) = ?
            ''', (today,))
            today_revenue = cursor.fetchone()[0] or 0
            
            # –î–æ—Ö–æ–¥–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
            week_ago = (datetime.now() - timedelta(days=7)).isoformat()
            cursor.execute('''
                SELECT SUM(stars_amount) 
                FROM payments 
                WHERE payment_date > ?
            ''', (week_ago,))
            week_revenue = cursor.fetchone()[0] or 0
            
            conn.close()
            
            return {
                'total_users': total_users,
                'active_users_30d': active_users,
                'total_payments': payment_stats[0] or 0,
                'total_stars': payment_stats[1] or 0,
                'avg_payment': round(payment_stats[2], 2) if payment_stats[2] else 0,
                'most_popular_plan': f"{popular_plan[0]} stars" if popular_plan else "N/A",
                'revenue_today': today_revenue,
                'revenue_week': week_revenue,
                'conversion_rate': round((payment_stats[0] / total_users * 100), 2) if total_users > 0 else 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå Get bot stats error: {e}")
            return None
    
    def get_payment_stats(self):
        """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂—ñ–≤"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('''
                SELECT COUNT(*) as total_payments,
                       SUM(stars_amount) as total_stars,
                       AVG(stars_amount) as avg_payment
                FROM payments
            ''')
            general_stats = cursor.fetchone()
            
            # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∞—Ä–∏—Ñ–∞—Ö
            cursor.execute('''
                SELECT stars_amount, COUNT(*) as count, 
                       SUM(stars_amount) as total_stars
                FROM payments 
                GROUP BY stars_amount 
                ORDER BY stars_amount
            ''')
            plan_distribution = cursor.fetchall()
            
            # –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π —Ç–∞—Ä–∏—Ñ
            cursor.execute('''
                SELECT stars_amount, COUNT(*) as count
                FROM payments 
                GROUP BY stars_amount 
                ORDER BY count DESC 
                LIMIT 1
            ''')
            most_popular = cursor.fetchone()
            
            # –î–æ—Ö–æ–¥–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            today = datetime.now().date().isoformat()
            cursor.execute('''
                SELECT SUM(stars_amount) 
                FROM payments 
                WHERE date(payment_date) = ?
            ''', (today,))
            revenue_today = cursor.fetchone()[0] or 0
            
            conn.close()
            
            return {
                'total_payments': general_stats[0] or 0,
                'total_stars': general_stats[1] or 0,
                'avg_payment': round(general_stats[2], 2) if general_stats[2] else 0,
                'plan_distribution': [
                    {'stars': row[0], 'count': row[1], 'total_stars': row[2]} 
                    for row in plan_distribution
                ],
                'most_popular_plan': most_popular[0] if most_popular else None,
                'revenue_today': revenue_today
            }
            
        except Exception as e:
            logger.error(f"‚ùå Get payment stats error: {e}")
            return None
    
    def cleanup_old_data(self, days_to_keep=90):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cutoff_date = (datetime.now() - timedelta(days=days_to_keep)).isoformat()
            
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
            cursor.execute('DELETE FROM usage_stats WHERE timestamp < ?', (cutoff_date,))
            usage_deleted = cursor.rowcount
            
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ª–æ–≥—ñ–≤ –ø–æ–º–∏–ª–æ–∫
            cursor.execute('DELETE FROM error_logs WHERE timestamp < ?', (cutoff_date,))
            errors_deleted = cursor.rowcount
            
            conn.commit()
            conn.close()
            
            logger.info(f"üßπ Cleanup completed: {usage_deleted} usage logs, {errors_deleted} error logs deleted")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Cleanup error: {e}")
            return False
    
    def check_connection(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT 1')
            result = cursor.fetchone()
            conn.close()
            
            return result is not None
            
        except Exception as e:
            logger.error(f"‚ùå Database connection check failed: {e}")
            return False
    
    def get_recent_users(self, limit=10):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT user_id, username, first_name, registration_date
                FROM users 
                ORDER BY registration_date DESC 
                LIMIT ?
            ''', (limit,))
            
            users = cursor.fetchall()
            conn.close()
            
            return [
                {
                    'user_id': user[0],
                    'username': user[1],
                    'first_name': user[2],
                    'registration_date': user[3]
                }
                for user in users
            ]
            
        except Exception as e:
            logger.error(f"‚ùå Get recent users error: {e}")
            return []
    
    def backup_database(self, backup_path=None):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            if not backup_path:
                backup_path = f"backup_weather_bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            
            source = sqlite3.connect(self.db_path)
            backup = sqlite3.connect(backup_path)
            
            source.backup(backup)
            
            backup.close()
            source.close()
            
            logger.info(f"üíæ Database backup created: {backup_path}")
            return backup_path
            
        except Exception as e:
            logger.error(f"‚ùå Database backup error: {e}")
            return None
