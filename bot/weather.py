import requests
import logging
import math
from datetime import datetime

logger = logging.getLogger(__name__)

class WeatherService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Weather API"""
    
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.openweathermap.org/data/2.5"
    
    def get_forecast(self, lat, lon):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ —Ç–∞ —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è"""
        try:
            logger.info(f"üå§Ô∏è Getting weather forecast for coordinates: {lat}, {lon}")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏
            forecast_data = self._get_weather_forecast(lat, lon)
            if not forecast_data:
                return None
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è
            air_quality_data = self._get_air_quality(lat, lon)
            if not air_quality_data:
                return None
            
            logger.info("‚úÖ Weather data retrieved successfully")
            return {
                'forecast': forecast_data,
                'air_quality': air_quality_data
            }
            
        except Exception as e:
            logger.error(f"‚ùå Weather service exception: {e}")
            return None
    
    def _get_weather_forecast(self, lat, lon):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è 5-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É"""
        try:
            url = f"{self.base_url}/forecast"
            params = {
                'lat': lat,
                'lon': lon,
                'units': 'metric',
                'lang': 'uk',
                'appid': self.api_key
            }
            
            logger.info(f"üì° Making forecast API request to: {url}")
            logger.info(f"üîë Using API key: {self.api_key[:10]}..." if self.api_key else "‚ùå No API key")
            
            response = requests.get(url, params=params, timeout=15)
            logger.info(f"üì° Forecast API response status: {response.status_code}")
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå Forecast API error: {response.status_code}")
                logger.error(f"‚ùå Forecast API response: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Forecast API exception: {e}")
            return None
    
    def _get_air_quality(self, lat, lon):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è"""
        try:
            url = f"{self.base_url}/air_pollution"
            params = {
                'lat': lat,
                'lon': lon,
                'appid': self.api_key
            }
            
            logger.info(f"üì° Making air quality API request")
            response = requests.get(url, params=params, timeout=15)
            logger.info(f"üì° Air quality API response status: {response.status_code}")
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå Air quality API error: {response.status_code}")
                logger.error(f"‚ùå Air quality API response: {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Air quality API exception: {e}")
            return None
    
    def get_moon_phase(self):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∑–∏ –º—ñ—Å—è—Ü—è"""
        try:
            now = datetime.now()
            year = now.year
            month = now.month
            day = now.day
            
            # –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ñ–∞–∑–∏ –º—ñ—Å—è—Ü—è
            c = math.floor((year - 1900) / 100)
            jd = 365.25 * (year - 1900) + math.floor(30.6 * month) + day - 694039.09
            age = jd * 1.5336 + 0.18
            phase = age - math.floor(age)
            
            if phase < 0.0625 or phase >= 0.9375:
                return {"phase": "–ù–æ–≤–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåë"}
            elif phase < 0.1875:
                return {"phase": "–ú–æ–ª–æ–¥–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåí"}
            elif phase < 0.3125:
                return {"phase": "–ü–µ—Ä—à–∞ —á–≤–µ—Ä—Ç—å", "icon": "üåì"}
            elif phase < 0.4375:
                return {"phase": "–ó—Ä–æ—Å—Ç–∞—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåî"}
            elif phase < 0.5625:
                return {"phase": "–ü–æ–≤–Ω–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåï"}
            elif phase < 0.6875:
                return {"phase": "–°–ø–∞–¥–∞—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåñ"}
            elif phase < 0.8125:
                return {"phase": "–û—Å—Ç–∞–Ω–Ω—è —á–≤–µ—Ä—Ç—å", "icon": "üåó"}
            else:
                return {"phase": "–°—Ç–∞—Ä—ñ—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåò"}
                
        except Exception as e:
            logger.error(f"‚ùå Moon phase calculation error: {e}")
            return {"phase": "–ù–µ–≤—ñ–¥–æ–º–∞", "icon": "üåô"}
    
    def create_weather_messages(self, weather_data, stars_count, config):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã"""
        try:
            logger.info(f"üìä Creating weather messages for {stars_count} stars")
            messages = []
            
            forecast_data = weather_data['forecast']
            air_data = weather_data['air_quality']
            
            # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
            city_name = forecast_data['city']['name']
            timezone_offset = forecast_data['city']['timezone'] // 3600
            moon_info = self.get_moon_phase()
            
            # –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è
            air_quality = air_data['list'][0]
            aqi_status = config.AQI_LABELS.get(air_quality['main']['aqi'], '–ù–µ–≤—ñ–¥–æ–º–∞')
            
            # –ß–∞—Å —Å—Ö–æ–¥—É/–∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è
            sunrise_timestamp = forecast_data['city']['sunrise'] + forecast_data['city']['timezone']
            sunset_timestamp = forecast_data['city']['sunset'] + forecast_data['city']['timezone']
            
            sunrise_time = datetime.fromtimestamp(sunrise_timestamp).strftime('%H:%M')
            sunset_time = datetime.fromtimestamp(sunset_timestamp).strftime('%H:%M')
            
            # –ó–∞–≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            header_message = self._create_header_message(
                city_name, timezone_offset, moon_info, aqi_status, 
                air_quality, sunrise_time, sunset_time, config
            )
            messages.append(header_message)
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ –¥–Ω—è—Ö
            plan = config.get_pricing_plan(stars_count)
            days_to_show = plan['days'] if plan else 2
            
            daily_messages = self._create_daily_messages(
                forecast_data, air_quality, aqi_status, moon_info, 
                days_to_show, config
            )
            messages.extend(daily_messages)
            
            # –ó–∞–≤–µ—Ä—à–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            final_message = self._create_final_message(city_name, days_to_show)
            messages.append(final_message)
            
            logger.info(f"‚úÖ Created {len(messages)} weather messages")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå Error creating weather messages: {e}")
            return []
    
    def _create_header_message(self, city_name, timezone_offset, moon_info, aqi_status, air_quality, sunrise_time, sunset_time, config):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        return f"""üå§Ô∏è –ü–†–û–ì–ù–û–ó –ü–û–ì–û–î–ò –û–¢–†–ò–ú–ê–ù–û!

üìç –õ–æ–∫–∞—Ü—ñ—è: {city_name}, –£–∫—Ä–∞—ó–Ω–∞
üïê –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: UTC{'+' if timezone_offset >= 0 else ''}{timezone_offset}
{moon_info['icon']} –§–∞–∑–∞ –º—ñ—Å—è—Ü—è: {moon_info['phase']}

üå¨Ô∏è –Ø–ö–Ü–°–¢–¨ –ü–û–í–Ü–¢–†–Ø: {aqi_status}
‚úÖ PM2.5: {air_quality['components']['pm2_5']} –º–∫–≥/–º¬≥
‚úÖ O3: {air_quality['components']['o3']} –º–∫–≥/–º¬≥

üåÖ –°—Ö—ñ–¥: {sunrise_time} | üåá –ó–∞—Ö—ñ–¥: {sunset_time}

üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–¥—Ö–æ–¥–∏—Ç—å –æ–∫—Ä–µ–º–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏...

üîó –•–æ—á–µ—Ç–µ —Ç–∞–∫–∏–π –∂–µ –ø—Ä–æ–≥–Ω–æ–∑? {config.BOT_USERNAME}"""
    
    def _create_daily_messages(self, forecast_data, air_quality, aqi_status, moon_info, days_to_show, config):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑—É"""
        messages = []
        
        for day_index in range(min(days_to_show, len(config.DAY_NAMES))):
            day_name = config.DAY_NAMES[day_index]
            
            # –ë–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–æ–≥–Ω–æ–∑—É (–∫–æ–∂–Ω—ñ 8 –∑–∞–ø–∏—Å—ñ–≤ = 1 –¥–µ–Ω—å)
            forecast_index = day_index * 8
            if forecast_index < len(forecast_data['list']):
                forecast_item = forecast_data['list'][forecast_index]
                
                temp = round(forecast_item['main']['temp'])
                feels_like = round(forecast_item['main']['feels_like'])
                description = forecast_item['weather'][0]['description']
                humidity = forecast_item['main']['humidity']
                wind_speed = forecast_item['wind']['speed']
                pressure = forecast_item['main']['pressure']
                
                # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
                temp_min = round(forecast_item['main']['temp_min'])
                temp_max = round(forecast_item['main']['temp_max'])
                clouds = forecast_item['clouds']['all']
                
                # Call-to-action –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è
                cta = config.CALL_TO_ACTIONS[day_index % len(config.CALL_TO_ACTIONS)]
                
                day_message = f"""üìÖ {day_name}
{moon_info['icon']} –§–∞–∑–∞ –º—ñ—Å—è—Ü—è: {moon_info['phase']}

üå¨Ô∏è –Ø–ö–Ü–°–¢–¨ –ü–û–í–Ü–¢–†–Ø: {aqi_status}
‚úÖ PM2.5: {air_quality['components']['pm2_5']} –º–∫–≥/–º¬≥
‚úÖ O3: {air_quality['components']['o3']} –º–∫–≥/–º¬≥

üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: {temp}¬∞C (–≤—ñ–¥—á—É–≤. {feels_like}¬∞C)
   üìà –ú—ñ–Ω: {temp_min}¬∞C | –ú–∞–∫—Å: {temp_max}¬∞C
   {description}

üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%
üí® –í—ñ—Ç–µ—Ä: {wind_speed} –º/—Å
üîΩ –¢–∏—Å–∫: {pressure} –≥–ü–∞
‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {clouds}%

{cta}"""
                
                messages.append(day_message)
        
        return messages
    
    def _create_final_message(self, city_name, days_count):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        return f"""‚úÖ –ü–†–û–ì–ù–û–ó –ü–û–ì–û–î–ò –ó–ê–í–ï–†–®–ï–ù–û!

üéØ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {days_count} –¥–Ω—ñ–≤ –¥–ª—è:
üìç {city_name}, –£–∫—Ä–∞—ó–Ω–∞

üí° –•–û–ß–ï–¢–ï –ù–û–í–ò–ô –ü–†–û–ì–ù–û–ó?

üîÑ –Ø–∫—â–æ –≤–∏ –∑–∞–ª–∏—à–∞—î—Ç–µ—Å—å —É —Ç–æ–º—É –∂ –º—ñ—Å—Ü—ñ:
‚Ä¢ –£ –≤–∞—Å —É–∂–µ —î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–∞–º–æ–≤–ª—è—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ 2-3 –¥–Ω—ñ

üåç –Ø–∫—â–æ –≤–∏ –∑–º—ñ–Ω–∏–ª–∏ –ª–æ–∫–∞—Ü—ñ—é:
‚Ä¢ –ú–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º—ñ—Å—Ü—è –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑

üõçÔ∏è –ì–æ—Ç–æ–≤—ñ –∑–∞–º–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑?"""
    
    def validate_coordinates(self, lat, lon):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        try:
            lat = float(lat)
            lon = float(lon)
            
            if -90 <= lat <= 90 and -180 <= lon <= 180:
                return True, lat, lon
            else:
                return False, None, None
        except (ValueError, TypeError):
            return False, None, None
    
    def get_weather_summary(self, weather_data):
        """–ö–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥ –ø–æ–≥–æ–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            forecast = weather_data['forecast']
            current = forecast['list'][0]
            
            return {
                'city': forecast['city']['name'],
                'temperature': round(current['main']['temp']),
                'description': current['weather'][0]['description'],
                'humidity': current['main']['humidity'],
                'wind_speed': current['wind']['speed']
            }
        except Exception as e:
            logger.error(f"‚ùå Error creating weather summary: {e}")
            return None
