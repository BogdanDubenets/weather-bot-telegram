import requests
import logging
import math
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

logger = logging.getLogger(__name__)

class WeatherService:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Weather API"""
    
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.openweathermap.org/data/2.5"
        
    def get_comprehensive_forecast(self, lat: float, lon: float) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –∑ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö API"""
        try:
            logger.info(f"üå§Ô∏è Getting comprehensive weather forecast for: {lat}, {lon}")
            
            # –ü–∞—Ä–∞–ª–µ–ª—å–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
            current_weather = self._get_current_weather(lat, lon)
            forecast_5day = self._get_5day_forecast(lat, lon) 
            air_quality = self._get_air_quality(lat, lon)
            uv_index = self._get_uv_index(lat, lon)
            
            if not current_weather or not forecast_5day:
                logger.error("‚ùå Failed to get essential weather data")
                return None
            
            # –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
            comprehensive_data = {
                'current': current_weather,
                'forecast': forecast_5day,
                'air_quality': air_quality,
                'uv_index': uv_index,
                'location_info': {
                    'lat': lat,
                    'lon': lon,
                    'city': forecast_5day.get('city', {}).get('name', 'Unknown'),
                    'country': forecast_5day.get('city', {}).get('country', 'Unknown')
                }
            }
            
            logger.info("‚úÖ Comprehensive weather data retrieved successfully")
            return comprehensive_data
            
        except Exception as e:
            logger.error(f"‚ùå Comprehensive forecast error: {e}")
            return None
    
    def _get_current_weather(self, lat: float, lon: float) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏"""
        try:
            url = f"{self.base_url}/weather"
            params = {
                'lat': lat,
                'lon': lon,
                'units': 'metric',
                'lang': 'uk',
                'appid': self.api_key
            }
            
            logger.info("üì° Getting current weather data")
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå Current weather API error: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Current weather exception: {e}")
            return None
    
    def _get_5day_forecast(self, lat: float, lon: float) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è 5-–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –∑ 3-–≥–æ–¥–∏–Ω–Ω–∏–º–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏"""
        try:
            url = f"{self.base_url}/forecast"
            params = {
                'lat': lat,
                'lon': lon,
                'units': 'metric',
                'lang': 'uk',
                'appid': self.api_key
            }
            
            logger.info("üì° Getting 5-day forecast data")
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå 5-day forecast API error: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå 5-day forecast exception: {e}")
            return None
    
    def _get_air_quality(self, lat: float, lon: float) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —è–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ—Ç—Ä—è"""
        try:
            url = f"{self.base_url}/air_pollution"
            params = {
                'lat': lat,
                'lon': lon,
                'appid': self.api_key
            }
            
            logger.info("üì° Getting air quality data")
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå Air quality API error: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Air quality exception: {e}")
            return None
    
    def _get_uv_index(self, lat: float, lon: float) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –£–§-—ñ–Ω–¥–µ–∫—Å—É (–∑ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –æ–∫—Ä–µ–º–∏–π UV API –ø–ª–∞—Ç–Ω–∏–π)"""
        try:
            # –£–§-—ñ–Ω–¥–µ–∫—Å –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
            current = self._get_current_weather(lat, lon)
            if current and 'uvi' in current:
                return {'current': current['uvi']}
            return None
        except Exception as e:
            logger.error(f"‚ùå UV index exception: {e}")
            return None
    
    def create_detailed_weather_messages(self, weather_data: Dict, stars_count: int, config) -> List[str]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
        try:
            logger.info(f"üìä Creating detailed weather messages for {stars_count} stars")
            messages = []
            
            current = weather_data['current']
            forecast = weather_data['forecast']
            air_quality = weather_data.get('air_quality')
            location = weather_data['location_info']
            
            # –ó–∞–≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Ç–æ—á–Ω–æ—é –ø–æ–≥–æ–¥–æ—é
            header_message = self._create_current_weather_message(current, location, air_quality, config)
            messages.append(header_message)
            
            # –î–µ—Ç–∞–ª—å–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –ø–æ –¥–Ω—è—Ö –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–æ–±–∏
            plan = config.get_pricing_plan(stars_count)
            days_to_show = plan['days'] if plan else 2
            
            daily_forecasts = self._create_detailed_daily_forecasts(
                forecast, air_quality, days_to_show, config
            )
            messages.extend(daily_forecasts)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–∞—Ä–∏—Ñ—ñ–≤ 3+ –∑—ñ—Ä–∫–∏)
            if stars_count >= 3:
                additional_info = self._create_additional_info_message(weather_data, config)
                if additional_info:
                    messages.append(additional_info)
            
            # –ó–∞–≤–µ—Ä—à–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            final_message = self._create_comprehensive_final_message(location['city'], days_to_show, stars_count)
            messages.append(final_message)
            
            logger.info(f"‚úÖ Created {len(messages)} detailed weather messages")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå Error creating detailed weather messages: {e}")
            return []
    
    def _create_current_weather_message(self, current: Dict, location: Dict, air_quality: Optional[Dict], config) -> str:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Ç–æ—á–Ω–æ—é –ø–æ–≥–æ–¥–æ—é"""
        try:
            city_name = location['city']
            country = location['country']
            
            # –ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–∞ –≤—ñ–¥—á—É—Ç—Ç—è
            temp = round(current['main']['temp'])
            feels_like = round(current['main']['feels_like'])
            temp_min = round(current['main']['temp_min'])
            temp_max = round(current['main']['temp_max'])
            
            # –û–ø–∏—Å –ø–æ–≥–æ–¥–∏
            description = current['weather'][0]['description'].title()
            weather_icon = self._get_weather_emoji(current['weather'][0]['id'])
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            humidity = current['main']['humidity']
            pressure = current['main']['pressure']
            wind_speed = current['wind']['speed']
            wind_deg = current['wind'].get('deg', 0)
            wind_direction = self._get_wind_direction(wind_deg)
            visibility = current.get('visibility', 0) // 1000  # –∫–º
            cloudiness = current['clouds']['all']
            
            # –°—Ö—ñ–¥/–∑–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è
            sunrise = datetime.fromtimestamp(current['sys']['sunrise']).strftime('%H:%M')
            sunset = datetime.fromtimestamp(current['sys']['sunset']).strftime('%H:%M')
            
            # –§–∞–∑–∞ –º—ñ—Å—è—Ü—è
            moon_info = self.get_moon_phase()
            
            # –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è
            air_info = ""
            if air_quality:
                aqi = air_quality['list'][0]['main']['aqi']
                aqi_status = config.AQI_LABELS.get(aqi, '–ù–µ–≤—ñ–¥–æ–º–∞')
                pm25 = air_quality['list'][0]['components']['pm2_5']
                pm10 = air_quality['list'][0]['components']['pm10']
                
                air_info = f"""
üå¨Ô∏è –Ø–ö–Ü–°–¢–¨ –ü–û–í–Ü–¢–†–Ø: {aqi_status}
‚úÖ PM2.5: {pm25} –º–∫–≥/–º¬≥ | PM10: {pm10} –º–∫–≥/–º¬≥"""
            
            return f"""{weather_icon} –ü–û–¢–û–ß–ù–ê –ü–û–ì–û–î–ê

üìç {city_name}, {country}
üïê –°—Ç–∞–Ω–æ–º –Ω–∞ {datetime.now().strftime('%H:%M, %d.%m.%Y')}

üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê
   –ó–∞—Ä–∞–∑: {temp}¬∞C (–≤—ñ–¥—á—É–≤. {feels_like}¬∞C)
   –ú—ñ–Ω/–ú–∞–∫—Å: {temp_min}¬∞C / {temp_max}¬∞C
   {description}

üå™Ô∏è –í–Ü–¢–ï–† –¢–ê –ê–¢–ú–û–°–§–ï–†–ê
   üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å: {wind_speed} –º/—Å ({wind_direction})
   üîΩ –¢–∏—Å–∫: {pressure} –≥–ü–∞
   üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%
   üëÅÔ∏è –í–∏–¥–∏–º—ñ—Å—Ç—å: {visibility} –∫–º
   ‚òÅÔ∏è –•–º–∞—Ä–Ω—ñ—Å—Ç—å: {cloudiness}%{air_info}

üåÖ –°–û–ù–¶–ï –¢–ê –ú–Ü–°–Ø–¶–¨
   –°—Ö—ñ–¥: {sunrise} | –ó–∞—Ö—ñ–¥: {sunset}
   {moon_info['icon']} {moon_info['phase']}

üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∫—ñ–ª—å–∫–∞ –¥–Ω—ñ–≤ –Ω–∞–¥—Ö–æ–¥–∏—Ç—å..."""
            
        except Exception as e:
            logger.error(f"‚ùå Error creating current weather message: {e}")
            return "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É"
    
    def _create_detailed_daily_forecasts(self, forecast: Dict, air_quality: Optional[Dict], days_to_show: int, config) -> List[str]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —â–æ–¥–µ–Ω–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–æ–±–∏"""
        messages = []
        
        try:
            # –ì—Ä—É–ø—É—î–º–æ –ø—Ä–æ–≥–Ω–æ–∑–∏ –ø–æ –¥–Ω—è—Ö
            daily_forecasts = self._group_forecasts_by_day(forecast['list'])
            
            day_names = config.DAY_NAMES[:days_to_show]
            
            for day_index, day_name in enumerate(day_names):
                if day_index < len(daily_forecasts):
                    day_data = daily_forecasts[day_index]
                    
                    # –†–æ–∑–±–∏–≤–∞—î–º–æ –¥–µ–Ω—å –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
                    periods = self._split_day_into_periods(day_data)
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –¥–Ω—è
                    day_message = self._create_single_day_message(day_name, periods, air_quality, config, day_index)
                    messages.append(day_message)
            
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå Error creating daily forecasts: {e}")
            return []
    
    def _group_forecasts_by_day(self, forecast_list: List[Dict]) -> List[List[Dict]]:
        """–ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –ø–æ –¥–Ω—è—Ö"""
        daily_forecasts = []
        current_day = None
        day_forecasts = []
        
        for forecast in forecast_list:
            forecast_date = datetime.fromtimestamp(forecast['dt']).date()
            
            if current_day != forecast_date:
                if day_forecasts:
                    daily_forecasts.append(day_forecasts)
                day_forecasts = [forecast]
                current_day = forecast_date
            else:
                day_forecasts.append(forecast)
        
        if day_forecasts:
            daily_forecasts.append(day_forecasts)
        
        return daily_forecasts
    
    def _split_day_into_periods(self, day_forecasts: List[Dict]) -> Dict[str, Dict]:
        """–†–æ–∑–±–∏—Ç—Ç—è –¥–Ω—è –Ω–∞ –ø–µ—Ä—ñ–æ–¥–∏: –Ω—ñ—á, —Ä–∞–Ω–æ–∫, –¥–µ–Ω—å, –≤–µ—á—ñ—Ä"""
        periods = {
            'night': None,      # 00:00-06:00
            'morning': None,    # 06:00-12:00  
            'day': None,        # 12:00-18:00
            'evening': None     # 18:00-24:00
        }
        
        for forecast in day_forecasts:
            hour = datetime.fromtimestamp(forecast['dt']).hour
            
            if 0 <= hour < 6:
                if not periods['night']:
                    periods['night'] = forecast
            elif 6 <= hour < 12:
                if not periods['morning']:
                    periods['morning'] = forecast
            elif 12 <= hour < 18:
                if not periods['day']:
                    periods['day'] = forecast
            else:  # 18-24
                if not periods['evening']:
                    periods['evening'] = forecast
        
        return periods
    
    def _create_single_day_message(self, day_name: str, periods: Dict, air_quality: Optional[Dict], config, day_index: int) -> str:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –Ω–∞ –ø–µ—Ä—ñ–æ–¥–∏"""
        try:
            # –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–µ–Ω—å
            day_temps = []
            descriptions = []
            
            for period_name, period_data in periods.items():
                if period_data:
                    day_temps.append(period_data['main']['temp'])
                    descriptions.append(period_data['weather'][0]['description'])
            
            if not day_temps:
                return f"üìÖ {day_name}\n‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è"
            
            min_temp = round(min(day_temps))
            max_temp = round(max(day_temps))
            main_description = max(set(descriptions), key=descriptions.count).title()
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Ä–æ–∑–±–∏–≤–∫–∞ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞–º
            period_details = []
            period_names = {
                'night': 'üåô –ù—ñ—á (00-06)',
                'morning': 'üåÖ –†–∞–Ω–æ–∫ (06-12)', 
                'day': '‚òÄÔ∏è –î–µ–Ω—å (12-18)',
                'evening': 'üåÜ –í–µ—á—ñ—Ä (18-24)'
            }
            
            for period_key, period_name in period_names.items():
                period_data = periods.get(period_key)
                if period_data:
                    temp = round(period_data['main']['temp'])
                    feels_like = round(period_data['main']['feels_like'])
                    humidity = period_data['main']['humidity']
                    wind_speed = period_data['wind']['speed']
                    description = period_data['weather'][0]['description']
                    
                    # –û–ø–∞–¥–∏
                    rain_info = ""
                    if 'rain' in period_data:
                        rain_3h = period_data['rain'].get('3h', 0)
                        if rain_3h > 0:
                            rain_info = f" üåßÔ∏è {rain_3h}–º–º"
                    
                    snow_info = ""
                    if 'snow' in period_data:
                        snow_3h = period_data['snow'].get('3h', 0)
                        if snow_3h > 0:
                            snow_info = f" ‚ùÑÔ∏è {snow_3h}–º–º"
                    
                    period_detail = f"""   {period_name}: {temp}¬∞C (–≤—ñ–¥—á—É–≤. {feels_like}¬∞C)
      {description}, –≤–æ–ª–æ–≥—ñ—Å—Ç—å {humidity}%, –≤—ñ—Ç–µ—Ä {wind_speed} –º/—Å{rain_info}{snow_info}"""
                    
                    period_details.append(period_detail)
            
            # –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è –¥–ª—è –¥–Ω—è
            air_info = ""
            if air_quality:
                aqi = air_quality['list'][0]['main']['aqi']
                aqi_status = config.AQI_LABELS.get(aqi, '–ù–µ–≤—ñ–¥–æ–º–∞')
                air_info = f"\nüå¨Ô∏è –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è: {aqi_status}"
            
            # Call-to-action
            cta = config.CALL_TO_ACTIONS[day_index % len(config.CALL_TO_ACTIONS)]
            
            return f"""üìÖ {day_name.upper()}
üå°Ô∏è {min_temp}¬∞C ‚Äî {max_temp}¬∞C | {main_description}{air_info}

üïê –î–ï–¢–ê–õ–¨–ù–û –ü–û –ü–ï–†–Ü–û–î–ê–•:
{chr(10).join(period_details)}

{cta}"""
            
        except Exception as e:
            logger.error(f"‚ùå Error creating single day message: {e}")
            return f"üìÖ {day_name}\n‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É"
    
    def _create_additional_info_message(self, weather_data: Dict, config) -> Optional[str]:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (–¥–ª—è –ø—Ä–µ–º—ñ—É–º —Ç–∞—Ä–∏—Ñ—ñ–≤)"""
        try:
            current = weather_data['current']
            location = weather_data['location_info']
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
            dew_point = self._calculate_dew_point(
                current['main']['temp'], 
                current['main']['humidity']
            )
            
            heat_index = self._calculate_heat_index(
                current['main']['temp'],
                current['main']['humidity']
            )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            recommendations = self._generate_weather_recommendations(current, weather_data.get('air_quality'))
            
            return f"""üìä –î–û–î–ê–¢–ö–û–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø

üßÆ –†–û–ó–†–ê–•–£–ù–ö–û–í–Ü –ü–ê–†–ê–ú–ï–¢–†–ò:
   üå°Ô∏è –¢–æ—á–∫–∞ —Ä–æ—Å–∏: {dew_point:.1f}¬∞C
   üî• –Ü–Ω–¥–µ–∫—Å —Å–ø–µ–∫–∏: {heat_index:.1f}¬∞C
   
üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:
{recommendations}

üìà –¢–ï–ù–î–ï–ù–¶–Ü–á:
   –ü–æ–≥–æ–¥–∞ –ø–æ—Å—Ç—É–ø–æ–≤–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –¥–Ω—ñ–≤.
   –°—Ç–µ–∂—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ –ø—Ä–æ–≥–Ω–æ–∑—É.

üî¨ –î–∞–Ω—ñ –Ω–∞–¥–∞–Ω—ñ OpenWeatherMap API
üì± –î–µ—Ç–∞–ª—å–Ω—ñ—à—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏: {config.BOT_USERNAME}"""
            
        except Exception as e:
            logger.error(f"‚ùå Error creating additional info: {e}")
            return None
    
    def _create_comprehensive_final_message(self, city_name: str, days_count: int, stars_count: int) -> str:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        return f"""‚úÖ –ü–û–í–ù–ò–ô –ü–†–û–ì–ù–û–ó –ó–ê–í–ï–†–®–ï–ù–û!

üéØ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:
üìç –õ–æ–∫–∞—Ü—ñ—è: {city_name}
üìÖ –ü–µ—Ä—ñ–æ–¥: {days_count} –¥–Ω—ñ–≤
‚≠ê –¢–∞—Ä–∏—Ñ: {stars_count} –∑—ñ—Ä–æ–∫
üïê –†–æ–∑–±–∏–≤–∫–∞: –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –¥–æ–±–∏ (–Ω—ñ—á/—Ä–∞–Ω–æ–∫/–¥–µ–Ω—å/–≤–µ—á—ñ—Ä)

üí° –ö–û–†–ò–°–ù–Ü –ü–û–†–ê–î–ò:
üîÑ –î–ª—è —Ç–æ–≥–æ –∂ –º—ñ—Å—Ü—è —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–∂–Ω—ñ 2-3 –¥–Ω—ñ
üåç –î–ª—è —ñ–Ω—à–æ—ó –ª–æ–∫–∞—Ü—ñ—ó –º–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑
üì± –ó–±–µ—Ä—ñ–≥–∞–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–ø–µ—Ä–µ–≥–ª—è–¥—É

üåü –î—è–∫—É—î–º–æ –∑–∞ –¥–æ–≤—ñ—Ä—É –¥–æ –Ω–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É!"""
    
    def _get_weather_emoji(self, weather_code: int) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –∑–∞ –∫–æ–¥–æ–º –ø–æ–≥–æ–¥–∏"""
        weather_emojis = {
            # –Ø—Å–Ω–æ
            800: "‚òÄÔ∏è",
            # –•–º–∞—Ä–∏
            801: "üå§Ô∏è", 802: "‚õÖ", 803: "‚òÅÔ∏è", 804: "‚òÅÔ∏è",
            # –î–æ—â
            500: "üå¶Ô∏è", 501: "üåßÔ∏è", 502: "üåßÔ∏è", 503: "‚õàÔ∏è", 504: "‚õàÔ∏è",
            520: "üå¶Ô∏è", 521: "üåßÔ∏è", 522: "üåßÔ∏è", 531: "üåßÔ∏è",
            # –î—Ä—ñ–±–Ω–∏–π –¥–æ—â
            300: "üå¶Ô∏è", 301: "üå¶Ô∏è", 302: "üåßÔ∏è", 310: "üå¶Ô∏è", 311: "üåßÔ∏è", 312: "üåßÔ∏è",
            # –°–Ω—ñ–≥
            600: "üå®Ô∏è", 601: "‚ùÑÔ∏è", 602: "‚ùÑÔ∏è", 611: "üå®Ô∏è", 612: "üå®Ô∏è", 613: "üå®Ô∏è",
            615: "üå®Ô∏è", 616: "üå®Ô∏è", 620: "üå®Ô∏è", 621: "‚ùÑÔ∏è", 622: "‚ùÑÔ∏è",
            # –¢—É–º–∞–Ω
            701: "üå´Ô∏è", 711: "üå´Ô∏è", 721: "üå´Ô∏è", 731: "üå´Ô∏è", 741: "üå´Ô∏è", 751: "üå´Ô∏è", 761: "üå´Ô∏è", 762: "üåã", 771: "üí®", 781: "üå™Ô∏è",
            # –ì—Ä–æ–∑–∞
            200: "‚õàÔ∏è", 201: "‚õàÔ∏è", 202: "‚ö°", 210: "üå©Ô∏è", 211: "‚õàÔ∏è", 212: "‚ö°", 221: "‚õàÔ∏è", 230: "‚õàÔ∏è", 231: "‚õàÔ∏è", 232: "‚ö°"
        }
        return weather_emojis.get(weather_code, "üå§Ô∏è")
    
    def _get_wind_direction(self, degrees: int) -> str:
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É –≤—ñ—Ç—Ä—É"""
        directions = [
            "–ü—ñ–≤–Ω", "–ü–Ω–ü–Ω–°—Ö", "–ü–Ω–°—Ö", "–°—Ö–ü–Ω–°—Ö", 
            "–°—Ö", "–°—Ö–ü–¥–°—Ö", "–ü–¥–°—Ö", "–ü–¥–ü–¥–°—Ö",
            "–ü–¥", "–ü–¥–ü–¥–ó—Ö", "–ü–¥–ó—Ö", "–ó—Ö–ü–¥–ó—Ö", 
            "–ó—Ö", "–ó—Ö–ü–Ω–ó—Ö", "–ü–Ω–ó—Ö", "–ü–Ω–ü–Ω–ó—Ö"
        ]
        index = round(degrees / 22.5) % 16
        return directions[index]
    
    def _calculate_dew_point(self, temp: float, humidity: int) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–∫–∏ —Ä–æ—Å–∏"""
        try:
            a = 17.27
            b = 237.7
            alpha = ((a * temp) / (b + temp)) + math.log(humidity / 100.0)
            return (b * alpha) / (a - alpha)
        except Exception:
            return temp - 10  # –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
    
    def _calculate_heat_index(self, temp: float, humidity: int) -> float:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —ñ–Ω–¥–µ–∫—Å—É —Å–ø–µ–∫–∏"""
        try:
            if temp < 27:  # –Ü–Ω–¥–µ–∫—Å —Å–ø–µ–∫–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –≤–∏—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö
                return temp
            
            # –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ —ñ–Ω–¥–µ–∫—Å—É —Å–ø–µ–∫–∏
            hi = temp + 0.5 * (temp - 20) * (humidity / 100)
            return max(temp, hi)
        except Exception:
            return temp
    
    def _generate_weather_recommendations(self, current: Dict, air_quality: Optional[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≥–æ–¥–Ω–∏—Ö —É–º–æ–≤"""
        recommendations = []
        
        temp = current['main']['temp']
        humidity = current['main']['humidity']
        wind_speed = current['wind']['speed']
        
        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if temp < 0:
            recommendations.append("üß• –û–¥—è–≥–∞–π—Ç–µ—Å—å —Ç–µ–ø–ª–æ, —Ä–∏–∑–∏–∫ –æ–±–º–æ—Ä–æ–∂–µ–Ω–Ω—è")
        elif temp < 10:
            recommendations.append("üß• –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ —Ç–µ–ø–ª–∏–π –æ–¥—è–≥")
        elif temp > 30:
            recommendations.append("üå°Ô∏è –°–ø–µ–∫–æ—Ç–Ω–æ, –ø–∏–π—Ç–µ –±—ñ–ª—å—à–µ –≤–æ–¥–∏")
        
        # –í–æ–ª–æ–≥—ñ—Å—Ç—å
        if humidity > 80:
            recommendations.append("üíß –í–∏—Å–æ–∫–∞ –≤–æ–ª–æ–≥—ñ—Å—Ç—å, –º–æ–∂–ª–∏–≤–µ –≤—ñ–¥—á—É—Ç—Ç—è –¥—É—Ö–æ—Ç–∏")
        elif humidity < 30:
            recommendations.append("üèúÔ∏è –ù–∏–∑—å–∫–∞ –≤–æ–ª–æ–≥—ñ—Å—Ç—å, –∑–≤–æ–ª–æ–∂—É–π—Ç–µ –ø–æ–≤—ñ—Ç—Ä—è")
        
        # –í—ñ—Ç–µ—Ä
        if wind_speed > 10:
            recommendations.append("üí® –°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä, –±—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ")
        
        # –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è
        if air_quality:
            aqi = air_quality['list'][0]['main']['aqi']
            if aqi >= 4:
                recommendations.append("üò∑ –ü–æ–≥–∞–Ω–∞ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è, –Ω–æ—Å—ñ—Ç—å –º–∞—Å–∫—É")
            elif aqi >= 3:
                recommendations.append("üå¨Ô∏è –ü–æ–º—ñ—Ä–Ω–∞ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è, –æ–±–º–µ–∂—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ –≤—É–ª–∏—Ü—ñ")
        
        return "\n   ".join(recommendations) if recommendations else "‚úÖ –ü–æ–≥–æ–¥–Ω—ñ —É–º–æ–≤–∏ —Å–ø—Ä–∏—è—Ç–ª–∏–≤—ñ"
    
    def get_moon_phase(self) -> Dict[str, str]:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∑–∏ –º—ñ—Å—è—Ü—è"""
        try:
            now = datetime.now()
            year = now.year
            month = now.month
            day = now.day
            
            # –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ñ–∞–∑–∏ –º—ñ—Å—è—Ü—è
            c = math.floor((year - 1900) / 100)
            jd = 365.25 * (year - 1900) + math.floor(30.6 * month) + day - 694039.09
            age = jd * 1.5336 + 0.18
            phase = age - math.floor(age)
            
            if phase < 0.0625 or phase >= 0.9375:
                return {"phase": "–ù–æ–≤–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåë"}
            elif phase < 0.1875:
                return {"phase": "–ú–æ–ª–æ–¥–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåí"}
            elif phase < 0.3125:
                return {"phase": "–ü–µ—Ä—à–∞ —á–≤–µ—Ä—Ç—å", "icon": "üåì"}
            elif phase < 0.4375:
                return {"phase": "–ó—Ä–æ—Å—Ç–∞—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåî"}
            elif phase < 0.5625:
                return {"phase": "–ü–æ–≤–Ω–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåï"}
            elif phase < 0.6875:
                return {"phase": "–°–ø–∞–¥–∞—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåñ"}
            elif phase < 0.8125:
                return {"phase": "–û—Å—Ç–∞–Ω–Ω—è —á–≤–µ—Ä—Ç—å", "icon": "üåó"}
            else:
                return {"phase": "–°—Ç–∞—Ä—ñ—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåò"}
                
        except Exception as e:
            logger.error(f"‚ùå Moon phase calculation error: {e}")
            return {"phase": "–ù–µ–≤—ñ–¥–æ–º–∞", "icon": "üåô"}
