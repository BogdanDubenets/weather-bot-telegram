"""
–î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è Weather Bot
"""

import re
import logging
from datetime import datetime, timedelta
from typing import Optional, Tuple, Dict, Any
import hashlib
import json

logger = logging.getLogger(__name__)

def format_timestamp(timestamp: str, format_str: str = "%d.%m.%Y %H:%M") -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å–æ–≤–æ—ó –º—ñ—Ç–∫–∏"""
    try:
        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        return dt.strftime(format_str)
    except Exception as e:
        logger.error(f"‚ùå Format timestamp error: {e}")
        return timestamp

def validate_coordinates(lat: float, lon: float) -> bool:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    try:
        return -90 <= float(lat) <= 90 and -180 <= float(lon) <= 180
    except (ValueError, TypeError):
        return False

def sanitize_text(text: str, max_length: int = 4000) -> str:
    """–û—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥–ª—è Telegram"""
    if not text:
        return ""
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    text = re.sub(r'[^\w\s\U0001F300-\U0001F9FF\u2600-\u26FF\u2700-\u27BF]', '', text, flags=re.UNICODE)
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
    if len(text) > max_length:
        text = text[:max_length-3] + "..."
    
    return text

def create_user_hash(user_id: int) -> str:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ö–µ—à—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∞–Ω–æ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—ó"""
    try:
        return hashlib.sha256(str(user_id).encode()).hexdigest()[:16]
    except Exception:
        return "unknown"

def parse_callback_data(callback_data: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ callback_data"""
    try:
        parts = callback_data.split('_')
        
        if len(parts) >= 3 and parts[0] == 'weather' and parts[1] == 'stars':
            return {
                'action': 'weather_order',
                'stars': int(parts[2]),
                'valid': True
            }
        
        return {
            'action': callback_data,
            'valid': False
        }
        
    except Exception as e:
        logger.error(f"‚ùå Parse callback data error: {e}")
        return {'action': callback_data, 'valid': False}

def calculate_time_ago(timestamp: str) -> str:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É, —â–æ –º–∏–Ω—É–≤"""
    try:
        dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        now = datetime.now()
        diff = now - dt
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω—ñ–≤ —Ç–æ–º—É"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} –≥–æ–¥–∏–Ω —Ç–æ–º—É"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É"
        else:
            return "—â–æ–π–Ω–æ"
            
    except Exception as e:
        logger.error(f"‚ùå Calculate time ago error: {e}")
        return "–Ω–µ–≤—ñ–¥–æ–º–æ"

def format_weather_emoji(weather_code: int, is_day: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –µ–º–æ–¥–∑—ñ –ø–æ–≥–æ–¥–∏ –∑–∞ –∫–æ–¥–æ–º"""
    weather_emojis = {
        # –Ø—Å–Ω–æ
        800: "‚òÄÔ∏è" if is_day else "üåô",
        # –•–º–∞—Ä–∏
        801: "üå§Ô∏è" if is_day else "‚òÅÔ∏è",
        802: "‚õÖ",
        803: "‚òÅÔ∏è",
        804: "‚òÅÔ∏è",
        # –î–æ—â
        500: "üå¶Ô∏è",
        501: "üåßÔ∏è",
        502: "üåßÔ∏è",
        503: "‚õàÔ∏è",
        504: "‚õàÔ∏è",
        # –°–Ω—ñ–≥
        600: "üå®Ô∏è",
        601: "‚ùÑÔ∏è",
        602: "‚ùÑÔ∏è",
        # –¢—É–º–∞–Ω
        701: "üå´Ô∏è",
        # –ì—Ä–æ–∑–∞
        200: "‚õàÔ∏è",
        201: "‚õàÔ∏è",
        202: "‚ö°",
    }
    
    return weather_emojis.get(weather_code, "üå§Ô∏è")

def format_currency(amount: int, currency: str = "stars") -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏"""
    if currency == "stars":
        star_emoji = "‚≠ê" * min(amount, 5)
        return f"{star_emoji} {amount}"
    return str(amount)

def truncate_text(text: str, max_length: int = 50) -> str:
    """–°–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."

def validate_user_input(text: str, input_type: str = "general") -> Tuple[bool, str]:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not text or not text.strip():
        return False, "–ü–æ—Ä–æ–∂–Ω—î –≤–≤–µ–¥–µ–Ω–Ω—è"
    
    text = text.strip()
    
    if input_type == "city":
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞
        if len(text) < 2 or len(text) > 50:
            return False, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞"
        
        if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ“ë“ê\s\-\']+$', text):
            return False, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –≤ –Ω–∞–∑–≤—ñ –º—ñ—Å—Ç–∞"
            
    elif input_type == "username":
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ username
        if not re.match(r'^[a-zA-Z0-9_]{3,32}$', text):
            return False, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç username"
    
    return True, text

def create_error_report(error: Exception, context: Dict[str, Any] = None) -> Dict[str, Any]:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É"""
    import traceback
    
    report = {
        'error_type': type(error).__name__,
        'error_message': str(error),
        'timestamp': datetime.now().isoformat(),
        'stack_trace': traceback.format_exc()
    }
    
    if context:
        report['context'] = context
    
    return report

def safe_json_loads(json_str: str, default: Any = None) -> Any:
    """–ë–µ–∑–ø–µ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON"""
    try:
        return json.loads(json_str)
    except (json.JSONDecodeError, TypeError):
        return default

def safe_json_dumps(obj: Any, default: str = "{}") -> str:
    """–ë–µ–∑–ø–µ—á–Ω–µ —Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞–Ω–Ω—è –≤ JSON"""
    try:
        return json.dumps(obj, ensure_ascii=False, indent=2)
    except (TypeError, ValueError):
        return default

def calculate_forecast_accuracy(predicted_temp: float, actual_temp: float) -> float:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–æ—á–Ω–æ—Å—Ç—ñ –ø—Ä–æ–≥–Ω–æ–∑—É"""
    try:
        diff = abs(predicted_temp - actual_temp)
        accuracy = max(0, 100 - (diff * 10))  # 1¬∞C —Ä—ñ–∑–Ω–∏—Ü—è = -10% —Ç–æ—á–Ω–æ—Å—Ç—ñ
        return round(accuracy, 2)
    except Exception:
        return 0.0

def generate_order_id(user_id: int, timestamp: str = None) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    if not timestamp:
        timestamp = datetime.now().isoformat()
    
    data = f"{user_id}_{timestamp}"
    return hashlib.md5(data.encode()).hexdigest()[:12].upper()

def parse_location_name(location_data: Dict[str, Any]) -> str:
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∏ –ª–æ–∫–∞—Ü—ñ—ó –∑ –¥–∞–Ω–∏—Ö"""
    try:
        if 'name' in location_data:
            return location_data['name']
        elif 'city' in location_data:
            return location_data['city']['name']
        elif 'address' in location_data:
            return location_data['address']
        else:
            return "–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è"
    except Exception:
        return "–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è"

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024.0
        i += 1
    
    return f"{size_bytes:.1f} {size_names[i]}"

def mask_sensitive_data(data: str, visible_chars: int = 4) -> str:
    """–ú–∞—Å–∫—É–≤–∞–Ω–Ω—è —á—É—Ç–ª–∏–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
    if len(data) <= visible_chars * 2:
        return "*" * len(data)
    
    visible_start = data[:visible_chars]
    visible_end = data[-visible_chars:]
    masked_middle = "*" * (len(data) - visible_chars * 2)
    
    return f"{visible_start}{masked_middle}{visible_end}"

def is_business_hours(timezone_offset: int = 0) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω (9:00 - 18:00)"""
    try:
        now = datetime.now()
        # –í—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É
        local_time = now + timedelta(hours=timezone_offset)
        hour = local_time.hour
        
        return 9 <= hour < 18
    except Exception:
        return True  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–≤–∞–∂–∞—î–º–æ —Ä–æ–±–æ—á–∏–º–∏ –≥–æ–¥–∏–Ω–∞–º–∏

def create_debug_info() -> Dict[str, Any]:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
    import sys
    import platform
    
    return {
        'python_version': sys.version,
        'platform': platform.platform(),
        'timestamp': datetime.now().isoformat(),
        'memory_usage': sys.getsizeof(globals())
    }
