import json
import requests
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class TelegramHandlers:
    """–û–±—Ä–æ–±–∫–∞ Telegram –æ–Ω–æ–≤–ª–µ–Ω—å –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥–∏"""
    
    def __init__(self, bot_token, weather_service, payment_service, db_service):
        self.bot_token = bot_token
        self.weather_service = weather_service
        self.payment_service = payment_service
        self.db_service = db_service
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
        # –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        from config.settings import Config
        self.config = Config()
    
    def process_update(self, update):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å"""
        try:
            if 'message' in update:
                if 'successful_payment' in update['message']:
                    return self.handle_successful_payment(update['message'])
                else:
                    return self.handle_message(update['message'])
            
            elif 'callback_query' in update:
                return self.handle_callback_query(update['callback_query'])
            
            elif 'pre_checkout_query' in update:
                return self.handle_pre_checkout(update['pre_checkout_query'])
            
            return True
        except Exception as e:
            logger.error(f"Process update error: {e}")
            return False
    
    def send_message(self, chat_id, text, reply_markup=None, parse_mode=None):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text
        }
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        if parse_mode:
            data['parse_mode'] = parse_mode
        
        try:
            logger.info(f"Sending message to {chat_id}: {text[:50]}...")
            response = requests.post(url, data=data, timeout=10)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ Message sent successfully")
                return True
            else:
                logger.error(f"‚ùå Message send failed: {result}")
                return False
        except Exception as e:
            logger.error(f"Send message error: {e}")
            return False
    
    def setup_webhook(self, webhook_url):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook"""
        url = f"{self.base_url}/setWebhook"
        webhook_endpoint = f"{webhook_url}/webhook"
        
        try:
            response = requests.post(url, data={'url': webhook_endpoint}, timeout=10)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ Webhook setup successful: {webhook_endpoint}")
                return True
            else:
                logger.error(f"‚ùå Webhook setup failed: {result}")
                return False
        except Exception as e:
            logger.error(f"‚ùå Webhook setup error: {e}")
            return False
    
    def handle_message(self, message):
        """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        chat_id = message['chat']['id']
        user = message['from']
        
        logger.info(f"üì® Processing message from user {user.get('username', user['id'])}")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.db_service.save_user(user)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.db_service.log_user_action(user['id'], 'message_received', {
            'message_type': 'text' if 'text' in message else 'location',
            'chat_type': message['chat']['type']
        })
        
        if 'text' in message:
            text = message['text']
            logger.info(f"üìù Text message: {text}")
            
            if text == '/start':
                return self.handle_start_command(chat_id)
            elif text == '/weather':
                return self.handle_weather_command(chat_id)
            elif text == '/help':
                return self.handle_help_command(chat_id)
            elif text == '/stats' and self._is_admin_user(user['id']):
                return self.handle_stats_command(chat_id)
            else:
                # –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–≥–∞–¥—É—î–º–æ –ø—Ä–æ –∫–æ–º–∞–Ω–¥–∏
                return self.send_message(chat_id, "üå§Ô∏è –î–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather")
        
        elif 'location' in message:
            logger.info(f"üìç Location message received")
            return self.handle_location(message)
        
        return True
    
    def handle_start_command(self, chat_id):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        logger.info(f"üöÄ Handling /start command for chat {chat_id}")
        return self.send_message(chat_id, self.config.MESSAGES['start'])
    
    def handle_help_command(self, chat_id):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help"""
        help_message = """üÜò –î–û–í–Ü–î–ö–ê –ü–û –ë–û–¢–£

üå§Ô∏è **–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/weather - –ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏  
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É

üí´ **–¢–∞—Ä–∏—Ñ–Ω—ñ –ø–ª–∞–Ω–∏:**
‚≠ê 1 –∑—ñ—Ä–∫–∞ = 2 –¥–Ω—ñ (–±–∞–∑–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑)
‚≠ê‚≠ê 2 –∑—ñ—Ä–∫–∏ = 3 –¥–Ω—ñ (—Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π)
‚≠ê‚≠ê‚≠ê 3 –∑—ñ—Ä–∫–∏ = 4 –¥–Ω—ñ (–¥–µ—Ç–∞–ª—å–Ω–∏–π + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó)
‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑—ñ—Ä–∫–∏ = 5 –¥–Ω—ñ–≤ (–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π)
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑—ñ—Ä–æ–∫ = 6 –¥–Ω—ñ–≤ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π)

üéØ **–©–æ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ:**
üìä –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞ –∑ —É—Å—ñ–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
üïê –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –¥–æ–±–∏ (–Ω—ñ—á/—Ä–∞–Ω–æ–∫/–¥–µ–Ω—å/–≤–µ—á—ñ—Ä)
üå°Ô∏è –î–µ—Ç–∞–ª—å–Ω—ñ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —Ç–∞ –≤—ñ–¥—á—É—Ç—Ç—è
üå¨Ô∏è –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
üåô –§–∞–∑–∏ –º—ñ—Å—è—Ü—è —Ç–∞ –∞—Å—Ç—Ä–æ–Ω–æ–º—ñ—á–Ω—ñ –¥–∞–Ω—ñ
üí° –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

‚ùì **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /weather
2. –û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç–∞—Ä–∏—Ñ
3. –û–ø–ª–∞—Ç—ñ—Ç—å Telegram Stars  
4. –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
5. –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑!

üîÑ **–ü—ñ–¥—Ç—Ä–∏–º–∫–∞:** –ü—Ä–æ–≥–Ω–æ–∑–∏ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è –∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏"""
        
        return self.send_message(chat_id, help_message)
    
    def handle_weather_command(self, chat_id):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /weather"""
        logger.info(f"üå§Ô∏è Handling /weather command for chat {chat_id}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ callback_data
        reply_markup = {
            'inline_keyboard': [
                [{'text': self.config.PRICING_PLANS[1]['name'], 'callback_data': 'weather_stars_1'}],
                [{'text': self.config.PRICING_PLANS[2]['name'], 'callback_data': 'weather_stars_2'}],
                [{'text': self.config.PRICING_PLANS[3]['name'], 'callback_data': 'weather_stars_3'}],
                [{'text': self.config.PRICING_PLANS[4]['name'], 'callback_data': 'weather_stars_4'}],
                [{'text': self.config.PRICING_PLANS[5]['name'], 'callback_data': 'weather_stars_5'}]
            ]
        }
        
        return self.send_message(chat_id, self.config.MESSAGES['weather_menu'], reply_markup)
    
    def handle_stats_command(self, chat_id):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stats (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"""
        try:
            stats = self.db_service.get_bot_stats()
            if stats:
                stats_message = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê

üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**
   –í—Å—å–æ–≥–æ: {stats['total_users']}
   –ê–∫—Ç–∏–≤–Ω—ñ (30–¥): {stats['active_users_30d']}
   
üí∞ **–ü–ª–∞—Ç–µ–∂—ñ:**
   –í—Å—å–æ–≥–æ: {stats['total_payments']}
   –ó—ñ—Ä–æ–∫ –∑–∞—Ä–æ–±–ª–µ–Ω–æ: {stats['total_stars']}
   –°–µ—Ä–µ–¥–Ω—ñ–π —á–µ–∫: {stats['avg_payment']} –∑—ñ—Ä–æ–∫
   
üìà **–î–æ—Ö–æ–¥–∏:**
   –ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {stats['revenue_today']} –∑—ñ—Ä–æ–∫
   –ó–∞ —Ç–∏–∂–¥–µ–Ω—å: {stats['revenue_week']} –∑—ñ—Ä–æ–∫
   
üéØ **–ö–æ–Ω–≤–µ—Ä—Å—ñ—è:** {stats['conversion_rate']}%
üèÜ **–ü–æ–ø—É–ª—è—Ä–Ω–∏–π —Ç–∞—Ä–∏—Ñ:** {stats['most_popular_plan']}"""
                
                return self.send_message(chat_id, stats_message)
            else:
                return self.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå Stats command error: {e}")
            return self.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        chat_id = callback_query['message']['chat']['id']
        user_id = callback_query['from']['id']
        data = callback_query['data']
        
        logger.info(f"üîò Handling callback query: {data}")
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ—ó
        self.db_service.log_user_action(user_id, 'button_clicked', {'callback_data': data})
        
        if data.startswith('weather_stars_'):
            try:
                stars_count = int(data.split('_')[-1])
                logger.info(f"‚≠ê Selected {stars_count} stars")
                
                plan = self.config.get_pricing_plan(stars_count)
                if not plan:
                    logger.error(f"‚ùå Invalid pricing plan: {stars_count}")
                    return False
                
                title = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ {plan['days']} –¥–Ω—ñ–≤"
                description = f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {plan['days']} –¥–Ω—ñ–≤ –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –¥–æ–±–∏"
                payload = f"weather_{plan['days']}_days"
                
                return self.payment_service.send_invoice(chat_id, title, description, payload, stars_count)
                
            except (ValueError, IndexError) as e:
                logger.error(f"‚ùå Error parsing callback data {data}: {e}")
                return False
        
        elif data == 'new_forecast':
            return self.handle_weather_command(chat_id)
        
        elif data == 'change_location':
            reply_markup = {
                'keyboard': [[{'text': 'üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é', 'request_location': True}]],
                'resize_keyboard': True,
                'one_time_keyboard': True
            }
            
            return self.send_message(
                chat_id, 
                "üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é:",
                reply_markup
            )
        
        return True
    
    def handle_pre_checkout(self, pre_checkout_query):
        """–û–±—Ä–æ–±–∫–∞ pre-checkout –∑–∞–ø–∏—Ç—É"""
        logger.info(f"üí≥ Handling pre-checkout query")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è pre-checkout
        is_valid, error_msg = self.payment_service.validate_pre_checkout(pre_checkout_query)
        
        return self.payment_service.answer_pre_checkout_query(
            pre_checkout_query['id'], 
            is_valid, 
            error_msg
        )
    
    def handle_successful_payment(self, message):
        """–û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É"""
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        payment = message['successful_payment']
        
        stars_count = payment['total_amount']
        plan = self.config.get_pricing_plan(stars_count)
        
        logger.info(f"üí∞ Processing successful payment: {stars_count} stars for {plan['days']} days")
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
        self.db_service.log_user_action(user_id, 'payment_successful', {
            'stars_amount': stars_count,
            'plan_days': plan['days'],
            'payload': payment['invoice_payload']
        })
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
        self.db_service.save_payment(
            user_id,
            stars_count,
            payment['invoice_payload'],
            payment['telegram_payment_charge_id']
        )
        
        # –ó–∞–ø–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
        reply_markup = {
            'keyboard': [[{'text': 'üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é', 'request_location': True}]],
            'resize_keyboard': True,
            'one_time_keyboard': True
        }
        
        message_text = self.config.MESSAGES['payment_success'].format(
            stars=stars_count, 
            days=plan['days']
        )
        
        return self.send_message(chat_id, message_text, reply_markup)
    
    def handle_location(self, message):
        """–û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        location = message['location']
        
        lat = location['latitude']
        lon = location['longitude']
        
        logger.info(f"üìç Processing location: {lat}, {lon}")
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó
        self.db_service.log_user_action(user_id, 'location_shared', {
            'lat': lat,
            'lon': lon
        })
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.db_service.update_location(user_id, lat, lon)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        self.send_message(chat_id, self.config.MESSAGES['processing'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
        stars_count = self.db_service.get_last_payment(user_id)
        
        if not stars_count:
            logger.error(f"‚ùå No payment found for user {user_id}")
            return self.send_message(chat_id, self.config.MESSAGES['no_payment'])
        
        logger.info(f"üí´ Found payment: {stars_count} stars for user {user_id}")
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –†–û–ó–®–ò–†–ï–ù–û–ì–û –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏
        weather_data = self.weather_service.get_comprehensive_forecast(lat, lon)
        
        if not weather_data:
            logger.error("‚ùå Failed to get comprehensive weather data")
            self.db_service.log_error(user_id, 'weather_api_error', 'Failed to get weather data')
            return self.send_message(chat_id, self.config.MESSAGES['weather_error'])
        
        logger.info("‚úÖ Comprehensive weather data retrieved, creating detailed messages...")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –î–ï–¢–ê–õ–¨–ù–ò–• –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —Ä–æ–∑–±–∏–≤–∫–æ—é –ø–æ –ø–µ—Ä—ñ–æ–¥–∞—Ö –¥–æ–±–∏
        messages = self.weather_service.create_detailed_weather_messages(
            weather_data, 
            stars_count, 
            self.config
        )
        
        if not messages:
            logger.error("‚ùå Failed to create detailed weather messages")
            self.db_service.log_error(user_id, 'message_creation_error', 'Failed to create weather messages')
            return self.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        
        logger.info(f"üì§ Sending {len(messages)} detailed weather messages")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        success_count = 0
        for i, msg in enumerate(messages):
            logger.info(f"üì§ Sending detailed message {i+1}/{len(messages)}")
            if self.send_message(chat_id, msg):
                success_count += 1
            else:
                logger.error(f"‚ùå Failed to send message {i+1}")
        
        # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        final_markup = {
            'inline_keyboard': [
                [{'text': 'üå§Ô∏è –ó–∞–º–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑', 'callback_data': 'new_forecast'}],
                [{'text': 'üìç –ó–º—ñ–Ω–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é', 'callback_data': 'change_location'}]
            ]
        }
        
        self.send_message(chat_id, self.config.MESSAGES['forecast_ready'], final_markup)
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        self.db_service.log_user_action(user_id, 'forecast_delivered', {
            'messages_sent': success_count,
            'total_messages': len(messages),
            'stars_used': stars_count,
            'location': f"{lat},{lon}"
        })
        
        logger.info("‚úÖ Detailed weather forecast process completed successfully")
        return success_count == len(messages)
    
    def _is_admin_user(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –î–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        admin_ids = [5648307936]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ ID
        return user_id in admin_ids
        # –î–æ–¥–∞–π—Ç–µ —Å—é–¥–∏ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        admin_ids = [5648307936]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ ID
        return user_id in admin_ids
