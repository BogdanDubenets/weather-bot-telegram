import json
import requests
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class TelegramHandlers:
    """–û–±—Ä–æ–±–∫–∞ Telegram –æ–Ω–æ–≤–ª–µ–Ω—å"""
    
    def __init__(self, bot_token, weather_service, payment_service, db_service):
        self.bot_token = bot_token
        self.weather_service = weather_service
        self.payment_service = payment_service
        self.db_service = db_service
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        
        # –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        from config.settings import Config
        self.config = Config()
    
    def process_update(self, update):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω—å"""
        try:
            if 'message' in update:
                if 'successful_payment' in update['message']:
                    return self.handle_successful_payment(update['message'])
                else:
                    return self.handle_message(update['message'])
            
            elif 'callback_query' in update:
                return self.handle_callback_query(update['callback_query'])
            
            elif 'pre_checkout_query' in update:
                return self.handle_pre_checkout(update['pre_checkout_query'])
            
            return True
        except Exception as e:
            logger.error(f"Process update error: {e}")
            return False
    
    def send_message(self, chat_id, text, reply_markup=None, parse_mode=None):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text
        }
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        if parse_mode:
            data['parse_mode'] = parse_mode
        
        try:
            logger.info(f"Sending message to {chat_id}: {text[:50]}...")
            response = requests.post(url, data=data, timeout=10)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ Message sent successfully")
                return True
            else:
                logger.error(f"‚ùå Message send failed: {result}")
                return False
        except Exception as e:
            logger.error(f"Send message error: {e}")
            return False
    
    def setup_webhook(self, webhook_url):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook"""
        url = f"{self.base_url}/setWebhook"
        webhook_endpoint = f"{webhook_url}/webhook"
        
        try:
            response = requests.post(url, data={'url': webhook_endpoint}, timeout=10)
            result = response.json()
            
            if result.get('ok'):
                logger.info(f"‚úÖ Webhook setup successful: {webhook_endpoint}")
                return True
            else:
                logger.error(f"‚ùå Webhook setup failed: {result}")
                return False
        except Exception as e:
            logger.error(f"‚ùå Webhook setup error: {e}")
            return False
    
    def handle_message(self, message):
        """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        chat_id = message['chat']['id']
        user = message['from']
        
        logger.info(f"üì® Processing message from user {user.get('username', user['id'])}")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        self.db_service.save_user(user)
        
        if 'text' in message:
            text = message['text']
            logger.info(f"üìù Text message: {text}")
            
            if text == '/start':
                return self.handle_start_command(chat_id)
            elif text == '/weather':
                return self.handle_weather_command(chat_id)
        
        elif 'location' in message:
            logger.info(f"üìç Location message received")
            return self.handle_location(message)
        
        return True
    
    def handle_start_command(self, chat_id):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
        logger.info(f"üöÄ Handling /start command for chat {chat_id}")
        return self.send_message(chat_id, self.config.MESSAGES['start'])
    
    def handle_weather_command(self, chat_id):
        """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /weather"""
        logger.info(f"üå§Ô∏è Handling /weather command for chat {chat_id}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ callback_data
        reply_markup = {
            'inline_keyboard': [
                [{'text': self.config.PRICING_PLANS[1]['name'], 'callback_data': 'weather_stars_1'}],
                [{'text': self.config.PRICING_PLANS[2]['name'], 'callback_data': 'weather_stars_2'}],
                [{'text': self.config.PRICING_PLANS[3]['name'], 'callback_data': 'weather_stars_3'}],
                [{'text': self.config.PRICING_PLANS[4]['name'], 'callback_data': 'weather_stars_4'}],
                [{'text': self.config.PRICING_PLANS[5]['name'], 'callback_data': 'weather_stars_5'}]
            ]
        }
        
        return self.send_message(chat_id, self.config.MESSAGES['weather_menu'], reply_markup)
    
    def handle_callback_query(self, callback_query):
        """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
        chat_id = callback_query['message']['chat']['id']
        data = callback_query['data']
        
        logger.info(f"üîò Handling callback query: {data}")
        
        if data.startswith('weather_stars_'):
            # –í–ò–ü–†–ê–í–õ–ï–ù–ê –õ–û–ì–Ü–ö–ê: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑—ñ—Ä–æ–∫
            try:
                stars_count = int(data.split('_')[-1])  # –û—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è
                logger.info(f"‚≠ê Selected {stars_count} stars")
                
                plan = self.config.get_pricing_plan(stars_count)
                if not plan:
                    logger.error(f"‚ùå Invalid pricing plan: {stars_count}")
                    return False
                
                title = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ {plan['days']} –¥–Ω—ñ–≤"
                description = f"–î–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ {plan['days']} –¥–Ω—ñ–≤ –∑ —è–∫—ñ—Å—Ç—é –ø–æ–≤—ñ—Ç—Ä—è —Ç–∞ —Ñ–∞–∑–æ—é –º—ñ—Å—è—Ü—è"
                payload = f"weather_{plan['days']}_days"
                
                return self.payment_service.send_invoice(chat_id, title, description, payload, stars_count)
                
            except (ValueError, IndexError) as e:
                logger.error(f"‚ùå Error parsing callback data {data}: {e}")
                return False
        
        elif data == 'new_forecast':
            return self.handle_weather_command(chat_id)
        
        elif data == 'change_location':
            reply_markup = {
                'keyboard': [[{'text': 'üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é', 'request_location': True}]],
                'resize_keyboard': True,
                'one_time_keyboard': True
            }
            
            return self.send_message(
                chat_id, 
                "üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:",
                reply_markup
            )
        
        return True
    
    def handle_pre_checkout(self, pre_checkout_query):
        """–û–±—Ä–æ–±–∫–∞ pre-checkout –∑–∞–ø–∏—Ç—É"""
        logger.info(f"üí≥ Handling pre-checkout query")
        return self.payment_service.answer_pre_checkout_query(pre_checkout_query['id'], True)
    
    def handle_successful_payment(self, message):
        """–û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É"""
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        payment = message['successful_payment']
        
        stars_count = payment['total_amount']
        plan = self.config.get_pricing_plan(stars_count)
        
        logger.info(f"üí∞ Processing successful payment: {stars_count} stars for {plan['days']} days")
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
        self.db_service.save_payment(
            user_id,
            stars_count,
            payment['invoice_payload'],
            payment['telegram_payment_charge_id']
        )
        
        # –ó–∞–ø–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
        reply_markup = {
            'keyboard': [[{'text': 'üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é', 'request_location': True}]],
            'resize_keyboard': True,
            'one_time_keyboard': True
        }
        
        message_text = self.config.MESSAGES['payment_success'].format(
            stars=stars_count, 
            days=plan['days']
        )
        
        return self.send_message(chat_id, message_text, reply_markup)
    
    def handle_location(self, message):
        """–û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó"""
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        location = message['location']
        
        lat = location['latitude']
        lon = location['longitude']
        
        logger.info(f"üìç Processing location: {lat}, {lon}")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
        self.send_message(chat_id, self.config.MESSAGES['processing'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
        stars_count = self.db_service.get_last_payment(user_id)
        
        if not stars_count:
            logger.error(f"‚ùå No payment found for user {user_id}")
            return self.send_message(chat_id, self.config.MESSAGES['no_payment'])
        
        logger.info(f"üí´ Found payment: {stars_count} stars for user {user_id}")
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏
        weather_data = self.weather_service.get_forecast(lat, lon)
        
        if not weather_data:
            logger.error("‚ùå Failed to get weather data")
            return self.send_message(chat_id, self.config.MESSAGES['weather_error'])
        
        logger.info("‚úÖ Weather data retrieved, creating messages...")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        messages = self.weather_service.create_weather_messages(weather_data, stars_count, self.config)
        
        if not messages:
            logger.error("‚ùå Failed to create weather messages")
            return self.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        
        logger.info(f"üì§ Sending {len(messages)} weather messages")
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        success = True
        for i, msg in enumerate(messages):
            logger.info(f"üì§ Sending message {i+1}/{len(messages)}")
            if not self.send_message(chat_id, msg):
                success = False
        
        # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        final_markup = {
            'inline_keyboard': [
                [{'text': 'üå§Ô∏è –ó–∞–º–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑', 'callback_data': 'new_forecast'}],
                [{'text': 'üìç –ó–º—ñ–Ω–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é', 'callback_data': 'change_location'}]
            ]
        }
        
        self.send_message(chat_id, self.config.MESSAGES['forecast_ready'], final_markup)
        
        logger.info("‚úÖ Weather forecast process completed successfully")
        return success
