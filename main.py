import os
import json
import requests
import logging
from flask import Flask, request, jsonify
from datetime import datetime
import sqlite3
import math

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
OPENWEATHER_API_KEY = os.environ.get('OPENWEATHER_API_KEY')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')

class WeatherBot:
    def __init__(self):
        self.bot_token = BOT_TOKEN
        self.weather_api_key = OPENWEATHER_API_KEY
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
        self.init_database()
    
    def init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        conn = sqlite3.connect('weather_bot.db', check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_purchase_date TEXT,
                last_location_lat REAL,
                last_location_lon REAL,
                last_location_name TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                stars_amount INTEGER,
                payload TEXT,
                payment_date TEXT,
                telegram_payment_id TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def send_message(self, chat_id, text, reply_markup=None, parse_mode='Markdown'):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': parse_mode
        }
        if reply_markup:
            data['reply_markup'] = json.dumps(reply_markup)
        
        try:
            response = requests.post(url, data=data, timeout=10)
            return response.json()
        except Exception as e:
            logger.error(f"Send message error: {e}")
            return None
    
    def send_invoice(self, chat_id, title, description, payload, stars_amount):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è invoice –¥–ª—è Telegram Stars"""
        url = f"{self.base_url}/sendInvoice"
        data = {
            'chat_id': chat_id,
            'title': title,
            'description': description,
            'payload': payload,
            'currency': 'XTR',
            'prices': json.dumps([{'label': title, 'amount': stars_amount}])
        }
        
        try:
            response = requests.post(url, data=data, timeout=10)
            return response.json()
        except Exception as e:
            logger.error(f"Send invoice error: {e}")
            return None
    
    def answer_pre_checkout_query(self, pre_checkout_query_id, ok=True):
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è pre-checkout"""
        url = f"{self.base_url}/answerPreCheckoutQuery"
        data = {
            'pre_checkout_query_id': pre_checkout_query_id,
            'ok': ok
        }
        
        try:
            response = requests.post(url, data=data, timeout=10)
            return response.json()
        except Exception as e:
            logger.error(f"Answer pre-checkout error: {e}")
            return None
    
    def get_weather_forecast(self, lat, lon):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏"""
        try:
            # 5-–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑
            forecast_url = f"https://api.openweathermap.org/data/2.5/forecast"
            forecast_params = {
                'lat': lat,
                'lon': lon,
                'units': 'metric',
                'lang': 'uk',
                'appid': self.weather_api_key
            }
            
            # –Ø–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è
            air_url = f"https://api.openweathermap.org/data/2.5/air_pollution"
            air_params = {
                'lat': lat,
                'lon': lon,
                'appid': self.weather_api_key
            }
            
            forecast_response = requests.get(forecast_url, params=forecast_params, timeout=10)
            air_response = requests.get(air_url, params=air_params, timeout=10)
            
            if forecast_response.status_code == 200 and air_response.status_code == 200:
                return {
                    'forecast': forecast_response.json(),
                    'air_quality': air_response.json()
                }
            else:
                logger.error(f"Weather API error: {forecast_response.status_code}, {air_response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"Weather API exception: {e}")
            return None
    
    def get_moon_phase(self):
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∑–∏ –º—ñ—Å—è—Ü—è"""
        now = datetime.now()
        year = now.year
        month = now.month
        day = now.day
        
        # –°–ø—Ä–æ—â–µ–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ñ–∞–∑–∏ –º—ñ—Å—è—Ü—è
        c = math.floor((year - 1900) / 100)
        jd = 365.25 * (year - 1900) + math.floor(30.6 * month) + day - 694039.09
        age = jd * 1.5336 + 0.18
        phase = age - math.floor(age)
        
        if phase < 0.0625 or phase >= 0.9375:
            return {"phase": "–ù–æ–≤–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåë"}
        elif phase < 0.1875:
            return {"phase": "–ú–æ–ª–æ–¥–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåí"}
        elif phase < 0.3125:
            return {"phase": "–ü–µ—Ä—à–∞ —á–≤–µ—Ä—Ç—å", "icon": "üåì"}
        elif phase < 0.4375:
            return {"phase": "–ó—Ä–æ—Å—Ç–∞—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåî"}
        elif phase < 0.5625:
            return {"phase": "–ü–æ–≤–Ω–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåï"}
        elif phase < 0.6875:
            return {"phase": "–°–ø–∞–¥–∞—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåñ"}
        elif phase < 0.8125:
            return {"phase": "–û—Å—Ç–∞–Ω–Ω—è —á–≤–µ—Ä—Ç—å", "icon": "üåó"}
        else:
            return {"phase": "–°—Ç–∞—Ä—ñ—é—á–∏–π –º—ñ—Å—è—Ü—å", "icon": "üåò"}
    
    def create_weather_messages(self, weather_data, stars_count):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
        messages = []
        forecast_data = weather_data['forecast']
        air_data = weather_data['air_quality']
        
        # –ó–∞–≥–æ–ª–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        city_name = forecast_data['city']['name']
        timezone_offset = forecast_data['city']['timezone'] // 3600
        moon_info = self.get_moon_phase()
        
        air_quality = air_data['list'][0]
        aqi_labels = {1: '–î–æ–±—Ä–∞ üü¢', 2: '–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∞ üü°', 3: '–ü–æ–º—ñ—Ä–Ω–∞ üü†', 4: '–ü–æ–≥–∞–Ω–∞ üî¥', 5: '–î—É–∂–µ –ø–æ–≥–∞–Ω–∞ üü£'}
        aqi_status = aqi_labels.get(air_quality['main']['aqi'], '–ù–µ–≤—ñ–¥–æ–º–∞')
        
        # –ß–∞—Å —Å—Ö–æ–¥—É/–∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è
        sunrise_timestamp = forecast_data['city']['sunrise'] + forecast_data['city']['timezone']
        sunset_timestamp = forecast_data['city']['sunset'] + forecast_data['city']['timezone']
        
        sunrise_time = datetime.fromtimestamp(sunrise_timestamp).strftime('%H:%M')
        sunset_time = datetime.fromtimestamp(sunset_timestamp).strftime('%H:%M')
        
        header_message = f"""üå§Ô∏è –ü–†–û–ì–ù–û–ó –ü–û–ì–û–î–ò –û–¢–†–ò–ú–ê–ù–û!

üìç –õ–æ–∫–∞—Ü—ñ—è: {city_name}, –£–∫—Ä–∞—ó–Ω–∞
üïê –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: UTC{'+' if timezone_offset >= 0 else ''}{timezone_offset}
{moon_info['icon']} –§–∞–∑–∞ –º—ñ—Å—è—Ü—è: {moon_info['phase']}

üå¨Ô∏è –Ø–ö–Ü–°–¢–¨ –ü–û–í–Ü–¢–†–Ø: {aqi_status}
‚úÖ PM2.5: {air_quality['components']['pm2_5']} Œºg/m¬≥
‚úÖ O‚ÇÉ: {air_quality['components']['o3']} Œºg/m¬≥

üåÖ –°—Ö—ñ–¥: {sunrise_time} | üåá –ó–∞—Ö—ñ–¥: {sunset_time}

üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞–¥—Ö–æ–¥–∏—Ç—å –æ–∫—Ä–µ–º–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏...

üîó –•–æ—á–µ—Ç–µ —Ç–∞–∫–∏–π –∂–µ –ø—Ä–æ–≥–Ω–æ–∑? @pogoda_bez_syurpryziv_bot"""
        
        messages.append(header_message)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ –¥–Ω—è—Ö (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –¥–ª—è Railway)
        days_to_show = stars_count + 1
        day_names = ['–°–¨–û–ì–û–î–ù–Ü', '–ó–ê–í–¢–†–ê', '–ü–Ü–°–õ–Ø–ó–ê–í–¢–†–ê', '–ß–ï–†–ï–ó 3 –î–ù–Ü', '–ß–ï–†–ï–ó 4 –î–ù–Ü', '–ß–ï–†–ï–ó 5 –î–ù–Ü–í']
        
        call_to_actions = [
            "üéØ –¢–æ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑—ñ–≤! @pogoda_bez_syurpryziv_bot",
            "‚≠ê –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–≥–æ–¥–∞ –∑–∞ –∑—ñ—Ä–∫–∏! @pogoda_bez_syurpryziv_bot",
            "üå§Ô∏è –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ —Ç—É—Ç: @pogoda_bez_syurpryziv_bot",
            "üí´ –ü–æ–≥–æ–¥–∞ –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑—ñ–≤: @pogoda_bez_syurpryziv_bot",
            "üîÆ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏: @pogoda_bez_syurpryziv_bot",
            "üåü –ù–∞–π—Ç–æ—á–Ω—ñ—à—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏: @pogoda_bez_syurpryziv_bot"
        ]
        
        # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤ –ø–æ –¥–Ω—è—Ö (—Å–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞)
        for day_index in range(min(days_to_show, len(day_names))):
            day_name = day_names[day_index]
            
            # –ë–µ—Ä–µ–º–æ –¥–∞–Ω—ñ –∑ –ø—Ä–æ–≥–Ω–æ–∑—É (—Å–ø—Ä–æ—â–µ–Ω–æ)
            if day_index * 8 < len(forecast_data['list']):
                forecast_item = forecast_data['list'][day_index * 8]
                temp = round(forecast_item['main']['temp'])
                feels_like = round(forecast_item['main']['feels_like'])
                description = forecast_item['weather'][0]['description']
                humidity = forecast_item['main']['humidity']
                wind_speed = forecast_item['wind']['speed']
                
                day_message = f"""üìÖ {day_name}
{moon_info['icon']} –§–∞–∑–∞ –º—ñ—Å—è—Ü—è: {moon_info['phase']}

üå¨Ô∏è –Ø–ö–Ü–°–¢–¨ –ü–û–í–Ü–¢–†–Ø: {aqi_status}
‚úÖ PM2.5: {air_quality['components']['pm2_5']} Œºg/m¬≥
‚úÖ O‚ÇÉ: {air_quality['components']['o3']} Œºg/m¬≥

‚òÄÔ∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê: {temp}¬∞C (–≤—ñ–¥—á—É–≤. {feels_like}¬∞C)
   {description}
   üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%
   üí® –í—ñ—Ç–µ—Ä: {wind_speed} –º/—Å

{call_to_actions[day_index % len(call_to_actions)]}"""
                
                messages.append(day_message)
        
        # –ó–∞–≤–µ—Ä—à–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        final_message = f"""‚úÖ –ü–†–û–ì–ù–û–ó –ü–û–ì–û–î–ò –ó–ê–í–ï–†–®–ï–ù–û!

üéØ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {days_to_show} –¥–Ω—ñ–≤ –¥–ª—è:
üìç {city_name}, –£–∫—Ä–∞—ó–Ω–∞

üí° –•–û–ß–ï–¢–ï –ù–û–í–ò–ô –ü–†–û–ì–ù–û–ó?

üîÑ –Ø–∫—â–æ –≤–∏ –∑–∞–ª–∏—à–∞—î—Ç–µ—Å—å —É —Ç–æ–º—É –∂ –º—ñ—Å—Ü—ñ:
‚Ä¢ –£ –≤–∞—Å —É–∂–µ —î –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–∞–º–æ–≤–ª—è—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —á–µ—Ä–µ–∑ 2-3 –¥–Ω—ñ

üåç –Ø–∫—â–æ –≤–∏ –∑–º—ñ–Ω–∏–ª–∏ –ª–æ–∫–∞—Ü—ñ—é:
‚Ä¢ –ú–æ–∂–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º—ñ—Å—Ü—è –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑

üõçÔ∏è –ì–æ—Ç–æ–≤—ñ –∑–∞–º–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑?"""
        
        messages.append(final_message)
        return messages
    
    def save_user(self, user_data):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É"""
        try:
            conn = sqlite3.connect('weather_bot.db', check_same_thread=False)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO users 
                (user_id, username, first_name, last_purchase_date)
                VALUES (?, ?, ?, ?)
            ''', (
                user_data['id'],
                user_data.get('username'),
                user_data.get('first_name'),
                datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"Save user error: {e}")
    
    def save_payment(self, user_id, stars_amount, payload, telegram_payment_id):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É"""
        try:
            conn = sqlite3.connect('weather_bot.db', check_same_thread=False)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO payments 
                (user_id, stars_amount, payload, payment_date, telegram_payment_id)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user_id,
                stars_amount,
                payload,
                datetime.now().isoformat(),
                telegram_payment_id
            ))
            
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"Save payment error: {e}")
    
    def get_last_payment(self, user_id):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            conn = sqlite3.connect('weather_bot.db', check_same_thread=False)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT stars_amount FROM payments 
                WHERE user_id = ? 
                ORDER BY payment_date DESC 
                LIMIT 1
            ''', (user_id,))
            
            result = cursor.fetchone()
            conn.close()
            
            return result[0] if result else None
        except Exception as e:
            logger.error(f"Get last payment error: {e}")
            return None

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
weather_bot = WeatherBot()

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–∫–∞ webhook –≤—ñ–¥ Telegram"""
    try:
        update = request.get_json()
        logger.info(f"Received update: {update}")
        
        # –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if 'message' in update:
            if 'successful_payment' in update['message']:
                handle_successful_payment(update['message'])
            else:
                handle_message(update['message'])
        
        # –û–±—Ä–æ–±–∫–∞ callback query (–∫–Ω–æ–ø–∫–∏)
        elif 'callback_query' in update:
            handle_callback_query(update['callback_query'])
        
        # –û–±—Ä–æ–±–∫–∞ pre-checkout
        elif 'pre_checkout_query' in update:
            handle_pre_checkout(update['pre_checkout_query'])
        
        return jsonify({'status': 'ok'})
    
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

def handle_message(message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    chat_id = message['chat']['id']
    user = message['from']
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    weather_bot.save_user(user)
    
    if 'text' in message:
        text = message['text']
        
        if text == '/start':
            handle_start_command(chat_id)
        elif text == '/weather':
            handle_weather_command(chat_id)
    
    elif 'location' in message:
        handle_location(message)

def handle_start_command(chat_id):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start"""
    message = """üå§Ô∏è *–í—ñ—Ç–∞—î–º–æ –≤ "–ü–æ–≥–æ–¥–∞ –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑—ñ–≤"!*

üéØ *–ù–∞—à—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:*
‚Ä¢ –¢–æ—á–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑–∏ –ø–æ–≥–æ–¥–∏ –Ω–∞ 2-6 –¥–Ω—ñ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞ —è–∫—ñ—Å—Ç—å –ø–æ–≤—ñ—Ç—Ä—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —á–∞—Å—Ç–∏–Ω–∞—Ö –¥–æ–±–∏
‚Ä¢ –§–∞–∑–∞ –º—ñ—Å—è—Ü—è —Ç–∞ —á–∞—Å —Å—Ö–æ–¥—É/–∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è

üí´ *–¢–∞—Ä–∏—Ñ–∏:*
‚≠ê 1 –∑—ñ—Ä–∫–∞ = 2 –¥–Ω—ñ
‚≠ê‚≠ê 2 –∑—ñ—Ä–∫–∏ = 3 –¥–Ω—ñ
‚≠ê‚≠ê‚≠ê 3 –∑—ñ—Ä–∫–∏ = 4 –¥–Ω—ñ
‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑—ñ—Ä–∫–∏ = 5 –¥–Ω—ñ–≤
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑—ñ—Ä–æ–∫ = 6 –¥–Ω—ñ–≤

üöÄ –ü–æ—á–Ω—ñ—Ç—å –∑ –∫–æ–º–∞–Ω–¥–∏ /weather"""
    
    weather_bot.send_message(chat_id, message)

def handle_weather_command(chat_id):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /weather"""
    reply_markup = {
        'inline_keyboard': [
            [{'text': '‚≠ê 1 –∑—ñ—Ä–∫–∞', 'callback_data': 'weather_1_star'}],
            [{'text': '‚≠ê‚≠ê 2 –∑—ñ—Ä–∫–∏', 'callback_data': 'weather_2_stars'}],
            [{'text': '‚≠ê‚≠ê‚≠ê 3 –∑—ñ—Ä–∫–∏', 'callback_data': 'weather_3_stars'}],
            [{'text': '‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑—ñ—Ä–∫–∏', 'callback_data': 'weather_4_stars'}],
            [{'text': '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑—ñ—Ä–æ–∫', 'callback_data': 'weather_5_stars'}]
        ]
    }
    
    message = """üå§Ô∏è *–û–±–µ—Ä—ñ—Ç—å —Ç–∞—Ä–∏—Ñ –ø—Ä–æ–≥–Ω–æ–∑—É –ø–æ–≥–æ–¥–∏:*

‚≠ê 1 –∑—ñ—Ä–∫–∞ = 2 –¥–Ω—ñ (—Å—å–æ–≥–æ–¥–Ω—ñ + –∑–∞–≤—Ç—Ä–∞)
‚≠ê‚≠ê 2 –∑—ñ—Ä–∫–∏ = 3 –¥–Ω—ñ
‚≠ê‚≠ê‚≠ê 3 –∑—ñ—Ä–∫–∏ = 4 –¥–Ω—ñ
‚≠ê‚≠ê‚≠ê‚≠ê 4 –∑—ñ—Ä–∫–∏ = 5 –¥–Ω—ñ–≤
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê 5 –∑—ñ—Ä–æ–∫ = 6 –¥–Ω—ñ–≤ (–ú–ê–ö–°–ò–ú–£–ú!)

üéØ –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ç–∞—Ä–∏—Ñ:"""
    
    weather_bot.send_message(chat_id, message, reply_markup)

def handle_callback_query(callback_query):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫"""
    chat_id = callback_query['message']['chat']['id']
    data = callback_query['data']
    
    if data.startswith('weather_'):
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑—ñ—Ä–æ–∫
        if 'star' in data:
            stars_count = 1
        else:
            stars_count = int(data.split('_')[1])
        
        days_count = stars_count + 1
        
        title = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ {days_count} –¥–Ω—ñ–≤"
        description = f"–î–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ {days_count} –¥–Ω—ñ–≤ –∑ —è–∫—ñ—Å—Ç—é –ø–æ–≤—ñ—Ç—Ä—è —Ç–∞ —Ñ–∞–∑–æ—é –º—ñ—Å—è—Ü—è"
        payload = f"weather_{days_count}_days"
        
        weather_bot.send_invoice(chat_id, title, description, payload, stars_count)
    
    elif data == 'new_forecast':
        handle_weather_command(chat_id)
    
    elif data == 'change_location':
        reply_markup = {
            'keyboard': [[{'text': 'üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é', 'request_location': True}]],
            'resize_keyboard': True,
            'one_time_keyboard': True
        }
        
        weather_bot.send_message(
            chat_id, 
            "üìç –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:",
            reply_markup
        )

def handle_pre_checkout(pre_checkout_query):
    """–û–±—Ä–æ–±–∫–∞ pre-checkout –∑–∞–ø–∏—Ç—É"""
    weather_bot.answer_pre_checkout_query(pre_checkout_query['id'], True)

def handle_successful_payment(message):
    """–û–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É"""
    chat_id = message['chat']['id']
    user_id = message['from']['id']
    payment = message['successful_payment']
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—É
    weather_bot.save_payment(
        user_id,
        payment['total_amount'],
        payment['invoice_payload'],
        payment['telegram_payment_charge_id']
    )
    
    # –ó–∞–ø–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
    reply_markup = {
        'keyboard': [[{'text': 'üìç –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ª–æ–∫–∞—Ü—ñ—î—é', 'request_location': True}]],
        'resize_keyboard': True,
        'one_time_keyboard': True
    }
    
    stars_count = payment['total_amount']
    days_count = stars_count + 1
    
    message_text = f"""‚úÖ –û–ø–ª–∞—Ç—É {stars_count} –∑—ñ—Ä–æ–∫ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ!

üí´ –í–∏ –ø—Ä–∏–¥–±–∞–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ {days_count} –¥–Ω—ñ–≤!

üìç –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.

üéØ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –Ω–∞–π–¥–µ—Ç–∞–ª—å–Ω—ñ—à–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –∑ —É—Å—ñ–º–∞ –º–æ–∂–ª–∏–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏!"""
    
    weather_bot.send_message(chat_id, message_text, reply_markup)

def handle_location(message):
    """–û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó"""
    chat_id = message['chat']['id']
    user_id = message['from']['id']
    location = message['location']
    
    lat = location['latitude']
    lon = location['longitude']
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    stars_count = weather_bot.get_last_payment(user_id)
    
    if not stars_count:
        weather_bot.send_message(chat_id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –æ–ø–ª–∞—Ç—ñ—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–º–∞–Ω–¥–æ—é /weather")
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥–Ω–æ–∑—É
    weather_data = weather_bot.get_weather_forecast(lat, lon)
    
    if not weather_data:
        weather_bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    messages = weather_bot.create_weather_messages(weather_data, stars_count)
    
    for i, msg in enumerate(messages):
        weather_bot.send_message(chat_id, msg)
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if i == len(messages) - 1:
            final_markup = {
                'inline_keyboard': [
                    [{'text': 'üå§Ô∏è –ó–∞–º–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑', 'callback_data': 'new_forecast'}],
                    [{'text': 'üìç –ó–º—ñ–Ω–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é', 'callback_data': 'change_location'}]
                ]
            }
            weather_bot.send_message(chat_id, msg, final_markup)

@app.route('/health', methods=['GET'])
def health():
    """Health check endpoint"""
    return jsonify({'status': 'healthy', 'timestamp': datetime.now().isoformat()})

@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return "üå§Ô∏è –ü–æ–≥–æ–¥–∞ –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑—ñ–≤ - Bot is running!"

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
    if WEBHOOK_URL and BOT_TOKEN:
        webhook_url = f"{WEBHOOK_URL}/webhook"
        set_webhook_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        
        try:
            response = requests.post(set_webhook_url, data={'url': webhook_url}, timeout=10)
            logger.info(f"Webhook setup response: {response.json()}")
        except Exception as e:
            logger.error(f"Webhook setup error: {e}")
    
    app.run(host='0.0.0.0', port=port, debug=False)
